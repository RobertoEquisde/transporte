/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AuthRequest
 */
export interface AuthRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    'password'?: string;
}
/**
 * 
 * @export
 * @interface CobroDTO
 */
export interface CobroDTO {
    /**
     * 
     * @type {number}
     * @memberof CobroDTO
     */
    'id'?: number;
    /**
     * 
     * @type {number}
     * @memberof CobroDTO
     */
    'unidadId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CobroDTO
     */
    'tarifaUnica'?: number;
    /**
     * 
     * @type {number}
     * @memberof CobroDTO
     */
    'cuotaAsociacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof CobroDTO
     */
    'fondoEstrella'?: number;
    /**
     * 
     * @type {number}
     * @memberof CobroDTO
     */
    'dias'?: number;
    /**
     * 
     * @type {string}
     * @memberof CobroDTO
     */
    'fechaTraslado'?: string;
}
/**
 * 
 * @export
 * @interface Cobros
 */
export interface Cobros {
    /**
     * 
     * @type {number}
     * @memberof Cobros
     */
    'id'?: number;
    /**
     * 
     * @type {Unidad}
     * @memberof Cobros
     */
    'unidad'?: Unidad;
    /**
     * 
     * @type {number}
     * @memberof Cobros
     */
    'tarifaUnica'?: number;
    /**
     * 
     * @type {number}
     * @memberof Cobros
     */
    'cuotaAsociacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof Cobros
     */
    'fondoEstrella'?: number;
    /**
     * 
     * @type {number}
     * @memberof Cobros
     */
    'dias'?: number;
    /**
     * 
     * @type {string}
     * @memberof Cobros
     */
    'fechaTraslado'?: string;
}
/**
 * 
 * @export
 * @interface CrearCobroRequest
 */
export interface CrearCobroRequest {
    /**
     * 
     * @type {number}
     * @memberof CrearCobroRequest
     */
    'unidadId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CrearCobroRequest
     */
    'tarifaUnica'?: number;
    /**
     * 
     * @type {number}
     * @memberof CrearCobroRequest
     */
    'cuotaAsociacion'?: number;
    /**
     * 
     * @type {number}
     * @memberof CrearCobroRequest
     */
    'fondoEstrella'?: number;
    /**
     * 
     * @type {number}
     * @memberof CrearCobroRequest
     */
    'dias'?: number;
    /**
     * 
     * @type {string}
     * @memberof CrearCobroRequest
     */
    'fechaTraslado'?: string;
}
/**
 * 
 * @export
 * @interface CrearDistribuidorDTO
 */
export interface CrearDistribuidorDTO {
    /**
     * 
     * @type {string}
     * @memberof CrearDistribuidorDTO
     */
    'nombreDistribuidora'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearDistribuidorDTO
     */
    'claveDistribuidora'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearDistribuidorDTO
     */
    'contacto'?: string;
    /**
     * 
     * @type {number}
     * @memberof CrearDistribuidorDTO
     */
    'telefono'?: number;
    /**
     * 
     * @type {number}
     * @memberof CrearDistribuidorDTO
     */
    'extension'?: number;
    /**
     * 
     * @type {string}
     * @memberof CrearDistribuidorDTO
     */
    'correo'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearDistribuidorDTO
     */
    'sucursal'?: string;
}
/**
 * 
 * @export
 * @interface CrearModeloRequest
 */
export interface CrearModeloRequest {
    /**
     * 
     * @type {string}
     * @memberof CrearModeloRequest
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearModeloRequest
     */
    'uso'?: string;
}
/**
 * 
 * @export
 * @interface CrearSeguroRequest
 */
export interface CrearSeguroRequest {
    /**
     * 
     * @type {string}
     * @memberof CrearSeguroRequest
     */
    'factura'?: string;
    /**
     * 
     * @type {number}
     * @memberof CrearSeguroRequest
     */
    'valorSeguro'?: number;
    /**
     * 
     * @type {number}
     * @memberof CrearSeguroRequest
     */
    'seguroDistribuidor'?: number;
    /**
     * 
     * @type {number}
     * @memberof CrearSeguroRequest
     */
    'unidadId'?: number;
}
/**
 * 
 * @export
 * @interface CrearUnidadRequest
 */
export interface CrearUnidadRequest {
    /**
     * 
     * @type {string}
     * @memberof CrearUnidadRequest
     */
    'noSerie'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearUnidadRequest
     */
    'comentario'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearUnidadRequest
     */
    'origen'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearUnidadRequest
     */
    'debisFecha'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearUnidadRequest
     */
    'reportadoA'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearUnidadRequest
     */
    'pagoDistribuidora'?: string;
    /**
     * 
     * @type {number}
     * @memberof CrearUnidadRequest
     */
    'valorUnidad'?: number;
    /**
     * 
     * @type {number}
     * @memberof CrearUnidadRequest
     */
    'modeloId'?: number;
    /**
     * 
     * @type {number}
     * @memberof CrearUnidadRequest
     */
    'distribuidorId'?: number;
}
/**
 * 
 * @export
 * @interface Distribuidor
 */
export interface Distribuidor {
    /**
     * 
     * @type {number}
     * @memberof Distribuidor
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Distribuidor
     */
    'nombreDistribuidora'?: string;
    /**
     * 
     * @type {string}
     * @memberof Distribuidor
     */
    'claveDistribuidora'?: string;
    /**
     * 
     * @type {string}
     * @memberof Distribuidor
     */
    'contacto'?: string;
    /**
     * 
     * @type {number}
     * @memberof Distribuidor
     */
    'telefono'?: number;
    /**
     * 
     * @type {number}
     * @memberof Distribuidor
     */
    'extension'?: number;
    /**
     * 
     * @type {string}
     * @memberof Distribuidor
     */
    'correo'?: string;
    /**
     * 
     * @type {string}
     * @memberof Distribuidor
     */
    'sucursal'?: string;
    /**
     * 
     * @type {Array<Unidad>}
     * @memberof Distribuidor
     */
    'unidades'?: Array<Unidad>;
}
/**
 * 
 * @export
 * @interface DistribuidoraInfoDTO
 */
export interface DistribuidoraInfoDTO {
    /**
     * 
     * @type {number}
     * @memberof DistribuidoraInfoDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof DistribuidoraInfoDTO
     */
    'nombreDistribuidora'?: string;
    /**
     * 
     * @type {string}
     * @memberof DistribuidoraInfoDTO
     */
    'claveDistribuidora'?: string;
}
/**
 * 
 * @export
 * @interface ImportarDesdeTxtRequest
 */
export interface ImportarDesdeTxtRequest {
    /**
     * 
     * @type {File}
     * @memberof ImportarDesdeTxtRequest
     */
    'archivo': File;
}
/**
 * 
 * @export
 * @interface Modelo
 */
export interface Modelo {
    /**
     * 
     * @type {number}
     * @memberof Modelo
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Modelo
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof Modelo
     */
    'uso'?: string;
}
/**
 * 
 * @export
 * @interface ModeloDTO
 */
export interface ModeloDTO {
    /**
     * 
     * @type {number}
     * @memberof ModeloDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof ModeloDTO
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModeloDTO
     */
    'uso'?: string;
}
/**
 * 
 * @export
 * @interface Seguro
 */
export interface Seguro {
    /**
     * 
     * @type {number}
     * @memberof Seguro
     */
    'id'?: number;
    /**
     * 
     * @type {Distribuidor}
     * @memberof Seguro
     */
    'distribuidor'?: Distribuidor;
    /**
     * 
     * @type {Unidad}
     * @memberof Seguro
     */
    'unidad'?: Unidad;
    /**
     * 
     * @type {string}
     * @memberof Seguro
     */
    'factura'?: string;
    /**
     * 
     * @type {number}
     * @memberof Seguro
     */
    'valorSeguro'?: number;
    /**
     * 
     * @type {number}
     * @memberof Seguro
     */
    'seguroDistribuidor'?: number;
    /**
     * 
     * @type {number}
     * @memberof Seguro
     */
    'cuotaSeguro'?: number;
}
/**
 * 
 * @export
 * @interface SeguroDTO
 */
export interface SeguroDTO {
    /**
     * 
     * @type {number}
     * @memberof SeguroDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof SeguroDTO
     */
    'factura'?: string;
    /**
     * 
     * @type {number}
     * @memberof SeguroDTO
     */
    'valorSeguro'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeguroDTO
     */
    'seguroDistribuidor'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeguroDTO
     */
    'unidadId'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeguroDTO
     */
    'distribuidorId'?: number;
}
/**
 * 
 * @export
 * @interface SeguroResumenDTO
 */
export interface SeguroResumenDTO {
    /**
     * 
     * @type {string}
     * @memberof SeguroResumenDTO
     */
    'factura'?: string;
    /**
     * 
     * @type {number}
     * @memberof SeguroResumenDTO
     */
    'valorSeguro'?: number;
    /**
     * 
     * @type {number}
     * @memberof SeguroResumenDTO
     */
    'seguroDistribuidor'?: number;
}
/**
 * 
 * @export
 * @interface Unidad
 */
export interface Unidad {
    /**
     * 
     * @type {number}
     * @memberof Unidad
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Unidad
     */
    'noSerie'?: string;
    /**
     * 
     * @type {Modelo}
     * @memberof Unidad
     */
    'modelo'?: Modelo;
    /**
     * 
     * @type {string}
     * @memberof Unidad
     */
    'comentario'?: string;
    /**
     * 
     * @type {string}
     * @memberof Unidad
     */
    'origen'?: string;
    /**
     * 
     * @type {string}
     * @memberof Unidad
     */
    'debisFecha'?: string;
    /**
     * 
     * @type {Distribuidor}
     * @memberof Unidad
     */
    'distribuidor'?: Distribuidor;
    /**
     * 
     * @type {string}
     * @memberof Unidad
     */
    'reportadoA'?: string;
    /**
     * 
     * @type {string}
     * @memberof Unidad
     */
    'pagoDistribuidora'?: string;
    /**
     * 
     * @type {number}
     * @memberof Unidad
     */
    'valorUnidad'?: number;
    /**
     * 
     * @type {Array<Seguro>}
     * @memberof Unidad
     */
    'seguros'?: Array<Seguro>;
    /**
     * 
     * @type {Array<Cobros>}
     * @memberof Unidad
     */
    'cobros'?: Array<Cobros>;
}
/**
 * 
 * @export
 * @interface UnidadDTO
 */
export interface UnidadDTO {
    /**
     * 
     * @type {number}
     * @memberof UnidadDTO
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UnidadDTO
     */
    'noSerie'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnidadDTO
     */
    'comentario'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnidadDTO
     */
    'origen'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnidadDTO
     */
    'debisFecha'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnidadDTO
     */
    'reportadoA'?: string;
    /**
     * 
     * @type {string}
     * @memberof UnidadDTO
     */
    'pagoDistribuidora'?: string;
    /**
     * 
     * @type {number}
     * @memberof UnidadDTO
     */
    'valorUnidad'?: number;
    /**
     * 
     * @type {ModeloDTO}
     * @memberof UnidadDTO
     */
    'modelo'?: ModeloDTO;
    /**
     * 
     * @type {DistribuidoraInfoDTO}
     * @memberof UnidadDTO
     */
    'distribuidor'?: DistribuidoraInfoDTO;
    /**
     * 
     * @type {SeguroResumenDTO}
     * @memberof UnidadDTO
     */
    'seguro'?: SeguroResumenDTO;
}

/**
 * AuthControllerApi - axios parameter creator
 * @export
 */
export const AuthControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login: async (authRequest: AuthRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'authRequest' is not null or undefined
            assertParamExists('login', 'authRequest', authRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(authRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthControllerApi - functional programming interface
 * @export
 */
export const AuthControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async login(authRequest: AuthRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.login(authRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthControllerApi.login']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthControllerApi - factory interface
 * @export
 */
export const AuthControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {AuthRequest} authRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(authRequest: AuthRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.login(authRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthControllerApi - object-oriented interface
 * @export
 * @class AuthControllerApi
 * @extends {BaseAPI}
 */
export class AuthControllerApi extends BaseAPI {
    /**
     * 
     * @param {AuthRequest} authRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthControllerApi
     */
    public login(authRequest: AuthRequest, options?: RawAxiosRequestConfig) {
        return AuthControllerApiFp(this.configuration).login(authRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CobrosControllerApi - axios parameter creator
 * @export
 */
export const CobrosControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CrearCobroRequest} crearCobroRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crear2: async (crearCobroRequest: CrearCobroRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crearCobroRequest' is not null or undefined
            assertParamExists('crear2', 'crearCobroRequest', crearCobroRequest)
            const localVarPath = `/api/cobros`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(crearCobroRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} unidadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorUnidad: async (unidadId: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'unidadId' is not null or undefined
            assertParamExists('listarPorUnidad', 'unidadId', unidadId)
            const localVarPath = `/api/cobros/unidad/{unidadId}`
                .replace(`{${"unidadId"}}`, encodeURIComponent(String(unidadId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CobrosControllerApi - functional programming interface
 * @export
 */
export const CobrosControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CobrosControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CrearCobroRequest} crearCobroRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async crear2(crearCobroRequest: CrearCobroRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.crear2(crearCobroRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CobrosControllerApi.crear2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} unidadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listarPorUnidad(unidadId: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CobroDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listarPorUnidad(unidadId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CobrosControllerApi.listarPorUnidad']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CobrosControllerApi - factory interface
 * @export
 */
export const CobrosControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CobrosControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CrearCobroRequest} crearCobroRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crear2(crearCobroRequest: CrearCobroRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.crear2(crearCobroRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} unidadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listarPorUnidad(unidadId: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<CobroDTO>> {
            return localVarFp.listarPorUnidad(unidadId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CobrosControllerApi - object-oriented interface
 * @export
 * @class CobrosControllerApi
 * @extends {BaseAPI}
 */
export class CobrosControllerApi extends BaseAPI {
    /**
     * 
     * @param {CrearCobroRequest} crearCobroRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CobrosControllerApi
     */
    public crear2(crearCobroRequest: CrearCobroRequest, options?: RawAxiosRequestConfig) {
        return CobrosControllerApiFp(this.configuration).crear2(crearCobroRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} unidadId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CobrosControllerApi
     */
    public listarPorUnidad(unidadId: number, options?: RawAxiosRequestConfig) {
        return CobrosControllerApiFp(this.configuration).listarPorUnidad(unidadId, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * DistribuidorControllerApi - axios parameter creator
 * @export
 */
export const DistribuidorControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} clave 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorClave: async (clave: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'clave' is not null or undefined
            assertParamExists('buscarPorClave', 'clave', clave)
            const localVarPath = `/api/distribuidores/buscar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (clave !== undefined) {
                localVarQueryParameter['clave'] = clave;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CrearDistribuidorDTO} crearDistribuidorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crear1: async (crearDistribuidorDTO: CrearDistribuidorDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crearDistribuidorDTO' is not null or undefined
            assertParamExists('crear1', 'crearDistribuidorDTO', crearDistribuidorDTO)
            const localVarPath = `/api/distribuidores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(crearDistribuidorDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminar1: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eliminar1', 'id', id)
            const localVarPath = `/api/distribuidores/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listar3: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/distribuidores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DistribuidorControllerApi - functional programming interface
 * @export
 */
export const DistribuidorControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DistribuidorControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} clave 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buscarPorClave(clave: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DistribuidoraInfoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buscarPorClave(clave, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistribuidorControllerApi.buscarPorClave']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CrearDistribuidorDTO} crearDistribuidorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async crear1(crearDistribuidorDTO: CrearDistribuidorDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Distribuidor>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.crear1(crearDistribuidorDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistribuidorControllerApi.crear1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eliminar1(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eliminar1(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistribuidorControllerApi.eliminar1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listar3(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<DistribuidoraInfoDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listar3(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DistribuidorControllerApi.listar3']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DistribuidorControllerApi - factory interface
 * @export
 */
export const DistribuidorControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DistribuidorControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} clave 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorClave(clave: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<DistribuidoraInfoDTO>> {
            return localVarFp.buscarPorClave(clave, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CrearDistribuidorDTO} crearDistribuidorDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crear1(crearDistribuidorDTO: CrearDistribuidorDTO, options?: RawAxiosRequestConfig): AxiosPromise<Distribuidor> {
            return localVarFp.crear1(crearDistribuidorDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminar1(id: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.eliminar1(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listar3(options?: RawAxiosRequestConfig): AxiosPromise<Array<DistribuidoraInfoDTO>> {
            return localVarFp.listar3(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DistribuidorControllerApi - object-oriented interface
 * @export
 * @class DistribuidorControllerApi
 * @extends {BaseAPI}
 */
export class DistribuidorControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} clave 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistribuidorControllerApi
     */
    public buscarPorClave(clave: string, options?: RawAxiosRequestConfig) {
        return DistribuidorControllerApiFp(this.configuration).buscarPorClave(clave, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CrearDistribuidorDTO} crearDistribuidorDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistribuidorControllerApi
     */
    public crear1(crearDistribuidorDTO: CrearDistribuidorDTO, options?: RawAxiosRequestConfig) {
        return DistribuidorControllerApiFp(this.configuration).crear1(crearDistribuidorDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistribuidorControllerApi
     */
    public eliminar1(id: number, options?: RawAxiosRequestConfig) {
        return DistribuidorControllerApiFp(this.configuration).eliminar1(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DistribuidorControllerApi
     */
    public listar3(options?: RawAxiosRequestConfig) {
        return DistribuidorControllerApiFp(this.configuration).listar3(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ModeloControllerApi - axios parameter creator
 * @export
 */
export const ModeloControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CrearModeloRequest} crearModeloRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crear: async (crearModeloRequest: CrearModeloRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crearModeloRequest' is not null or undefined
            assertParamExists('crear', 'crearModeloRequest', crearModeloRequest)
            const localVarPath = `/api/modelos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(crearModeloRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminar: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('eliminar', 'id', id)
            const localVarPath = `/api/modelos/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listar2: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/modelos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ModeloControllerApi - functional programming interface
 * @export
 */
export const ModeloControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ModeloControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CrearModeloRequest} crearModeloRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async crear(crearModeloRequest: CrearModeloRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.crear(crearModeloRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModeloControllerApi.crear']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eliminar(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eliminar(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModeloControllerApi.eliminar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listar2(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ModeloDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listar2(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ModeloControllerApi.listar2']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ModeloControllerApi - factory interface
 * @export
 */
export const ModeloControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ModeloControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {CrearModeloRequest} crearModeloRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crear(crearModeloRequest: CrearModeloRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.crear(crearModeloRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminar(id: number, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.eliminar(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listar2(options?: RawAxiosRequestConfig): AxiosPromise<Array<ModeloDTO>> {
            return localVarFp.listar2(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ModeloControllerApi - object-oriented interface
 * @export
 * @class ModeloControllerApi
 * @extends {BaseAPI}
 */
export class ModeloControllerApi extends BaseAPI {
    /**
     * 
     * @param {CrearModeloRequest} crearModeloRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeloControllerApi
     */
    public crear(crearModeloRequest: CrearModeloRequest, options?: RawAxiosRequestConfig) {
        return ModeloControllerApiFp(this.configuration).crear(crearModeloRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeloControllerApi
     */
    public eliminar(id: number, options?: RawAxiosRequestConfig) {
        return ModeloControllerApiFp(this.configuration).eliminar(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ModeloControllerApi
     */
    public listar2(options?: RawAxiosRequestConfig) {
        return ModeloControllerApiFp(this.configuration).listar2(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ReporteFinancieroControllerApi - axios parameter creator
 * @export
 */
export const ReporteFinancieroControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} mes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportarReporteFinanciero: async (mes: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mes' is not null or undefined
            assertParamExists('exportarReporteFinanciero', 'mes', mes)
            const localVarPath = `/api/reportes/financiero`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mes !== undefined) {
                localVarQueryParameter['mes'] = mes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReporteFinancieroControllerApi - functional programming interface
 * @export
 */
export const ReporteFinancieroControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReporteFinancieroControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} mes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportarReporteFinanciero(mes: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportarReporteFinanciero(mes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ReporteFinancieroControllerApi.exportarReporteFinanciero']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ReporteFinancieroControllerApi - factory interface
 * @export
 */
export const ReporteFinancieroControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReporteFinancieroControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} mes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportarReporteFinanciero(mes: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exportarReporteFinanciero(mes, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReporteFinancieroControllerApi - object-oriented interface
 * @export
 * @class ReporteFinancieroControllerApi
 * @extends {BaseAPI}
 */
export class ReporteFinancieroControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} mes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReporteFinancieroControllerApi
     */
    public exportarReporteFinanciero(mes: string, options?: RawAxiosRequestConfig) {
        return ReporteFinancieroControllerApiFp(this.configuration).exportarReporteFinanciero(mes, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * SeguroControllerApi - axios parameter creator
 * @export
 */
export const SeguroControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} factura 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorFactura: async (factura: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'factura' is not null or undefined
            assertParamExists('buscarPorFactura', 'factura', factura)
            const localVarPath = `/api/seguros/buscar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (factura !== undefined) {
                localVarQueryParameter['factura'] = factura;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CrearSeguroRequest} crearSeguroRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crearSeguro: async (crearSeguroRequest: CrearSeguroRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crearSeguroRequest' is not null or undefined
            assertParamExists('crearSeguro', 'crearSeguroRequest', crearSeguroRequest)
            const localVarPath = `/api/seguros`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(crearSeguroRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} factura 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminarPorFactura: async (factura: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'factura' is not null or undefined
            assertParamExists('eliminarPorFactura', 'factura', factura)
            const localVarPath = `/api/seguros/factura/{factura}`
                .replace(`{${"factura"}}`, encodeURIComponent(String(factura)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listar1: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/seguros`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SeguroControllerApi - functional programming interface
 * @export
 */
export const SeguroControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SeguroControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} factura 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buscarPorFactura(factura: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SeguroDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buscarPorFactura(factura, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeguroControllerApi.buscarPorFactura']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CrearSeguroRequest} crearSeguroRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async crearSeguro(crearSeguroRequest: CrearSeguroRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SeguroDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.crearSeguro(crearSeguroRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeguroControllerApi.crearSeguro']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} factura 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eliminarPorFactura(factura: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eliminarPorFactura(factura, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeguroControllerApi.eliminarPorFactura']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listar1(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SeguroDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listar1(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['SeguroControllerApi.listar1']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * SeguroControllerApi - factory interface
 * @export
 */
export const SeguroControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SeguroControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} factura 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorFactura(factura: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<SeguroDTO>> {
            return localVarFp.buscarPorFactura(factura, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CrearSeguroRequest} crearSeguroRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crearSeguro(crearSeguroRequest: CrearSeguroRequest, options?: RawAxiosRequestConfig): AxiosPromise<SeguroDTO> {
            return localVarFp.crearSeguro(crearSeguroRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} factura 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminarPorFactura(factura: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eliminarPorFactura(factura, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listar1(options?: RawAxiosRequestConfig): AxiosPromise<Array<SeguroDTO>> {
            return localVarFp.listar1(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SeguroControllerApi - object-oriented interface
 * @export
 * @class SeguroControllerApi
 * @extends {BaseAPI}
 */
export class SeguroControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} factura 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeguroControllerApi
     */
    public buscarPorFactura(factura: string, options?: RawAxiosRequestConfig) {
        return SeguroControllerApiFp(this.configuration).buscarPorFactura(factura, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CrearSeguroRequest} crearSeguroRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeguroControllerApi
     */
    public crearSeguro(crearSeguroRequest: CrearSeguroRequest, options?: RawAxiosRequestConfig) {
        return SeguroControllerApiFp(this.configuration).crearSeguro(crearSeguroRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} factura 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeguroControllerApi
     */
    public eliminarPorFactura(factura: string, options?: RawAxiosRequestConfig) {
        return SeguroControllerApiFp(this.configuration).eliminarPorFactura(factura, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SeguroControllerApi
     */
    public listar1(options?: RawAxiosRequestConfig) {
        return SeguroControllerApiFp(this.configuration).listar1(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TxtImportControllerApi - axios parameter creator
 * @export
 */
export const TxtImportControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {ImportarDesdeTxtRequest} [importarDesdeTxtRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importarDesdeTxt: async (importarDesdeTxtRequest?: ImportarDesdeTxtRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/importar/txt`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(importarDesdeTxtRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TxtImportControllerApi - functional programming interface
 * @export
 */
export const TxtImportControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TxtImportControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {ImportarDesdeTxtRequest} [importarDesdeTxtRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async importarDesdeTxt(importarDesdeTxtRequest?: ImportarDesdeTxtRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.importarDesdeTxt(importarDesdeTxtRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TxtImportControllerApi.importarDesdeTxt']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TxtImportControllerApi - factory interface
 * @export
 */
export const TxtImportControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TxtImportControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {ImportarDesdeTxtRequest} [importarDesdeTxtRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        importarDesdeTxt(importarDesdeTxtRequest?: ImportarDesdeTxtRequest, options?: RawAxiosRequestConfig): AxiosPromise<object> {
            return localVarFp.importarDesdeTxt(importarDesdeTxtRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TxtImportControllerApi - object-oriented interface
 * @export
 * @class TxtImportControllerApi
 * @extends {BaseAPI}
 */
export class TxtImportControllerApi extends BaseAPI {
    /**
     * 
     * @param {ImportarDesdeTxtRequest} [importarDesdeTxtRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TxtImportControllerApi
     */
    public importarDesdeTxt(importarDesdeTxtRequest?: ImportarDesdeTxtRequest, options?: RawAxiosRequestConfig) {
        return TxtImportControllerApiFp(this.configuration).importarDesdeTxt(importarDesdeTxtRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UnidadControllerApi - axios parameter creator
 * @export
 */
export const UnidadControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} terminaEn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorUltimosDigitos: async (terminaEn: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'terminaEn' is not null or undefined
            assertParamExists('buscarPorUltimosDigitos', 'terminaEn', terminaEn)
            const localVarPath = `/api/unidades/buscar-por-digitos`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (terminaEn !== undefined) {
                localVarQueryParameter['terminaEn'] = terminaEn;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {CrearUnidadRequest} crearUnidadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crearUnidad: async (crearUnidadRequest: CrearUnidadRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'crearUnidadRequest' is not null or undefined
            assertParamExists('crearUnidad', 'crearUnidadRequest', crearUnidadRequest)
            const localVarPath = `/api/unidades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(crearUnidadRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} serie 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminarUnidadPorSerie: async (serie: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serie' is not null or undefined
            assertParamExists('eliminarUnidadPorSerie', 'serie', serie)
            const localVarPath = `/api/unidades/eliminar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (serie !== undefined) {
                localVarQueryParameter['serie'] = serie;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} mes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportExcelPorMesDistribuidora: async (mes: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'mes' is not null or undefined
            assertParamExists('exportExcelPorMesDistribuidora', 'mes', mes)
            const localVarPath = `/api/unidades/reportes/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (mes !== undefined) {
                localVarQueryParameter['mes'] = mes;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listar: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/unidades`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} serie 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtenerPorNumeroSerie: async (serie: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'serie' is not null or undefined
            assertParamExists('obtenerPorNumeroSerie', 'serie', serie)
            const localVarPath = `/api/unidades/buscar`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (serie !== undefined) {
                localVarQueryParameter['serie'] = serie;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UnidadControllerApi - functional programming interface
 * @export
 */
export const UnidadControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UnidadControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} terminaEn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buscarPorUltimosDigitos(terminaEn: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnidadDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buscarPorUltimosDigitos(terminaEn, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnidadControllerApi.buscarPorUltimosDigitos']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {CrearUnidadRequest} crearUnidadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async crearUnidad(crearUnidadRequest: CrearUnidadRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnidadDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.crearUnidad(crearUnidadRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnidadControllerApi.crearUnidad']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} serie 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async eliminarUnidadPorSerie(serie: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.eliminarUnidadPorSerie(serie, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnidadControllerApi.eliminarUnidadPorSerie']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} mes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async exportExcelPorMesDistribuidora(mes: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.exportExcelPorMesDistribuidora(mes, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnidadControllerApi.exportExcelPorMesDistribuidora']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listar(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UnidadDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listar(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnidadControllerApi.listar']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} serie 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async obtenerPorNumeroSerie(serie: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UnidadDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.obtenerPorNumeroSerie(serie, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UnidadControllerApi.obtenerPorNumeroSerie']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UnidadControllerApi - factory interface
 * @export
 */
export const UnidadControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UnidadControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {string} terminaEn 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buscarPorUltimosDigitos(terminaEn: string, options?: RawAxiosRequestConfig): AxiosPromise<Array<UnidadDTO>> {
            return localVarFp.buscarPorUltimosDigitos(terminaEn, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {CrearUnidadRequest} crearUnidadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        crearUnidad(crearUnidadRequest: CrearUnidadRequest, options?: RawAxiosRequestConfig): AxiosPromise<UnidadDTO> {
            return localVarFp.crearUnidad(crearUnidadRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} serie 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        eliminarUnidadPorSerie(serie: string, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.eliminarUnidadPorSerie(serie, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} mes 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        exportExcelPorMesDistribuidora(mes: string, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.exportExcelPorMesDistribuidora(mes, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listar(options?: RawAxiosRequestConfig): AxiosPromise<Array<UnidadDTO>> {
            return localVarFp.listar(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} serie 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        obtenerPorNumeroSerie(serie: string, options?: RawAxiosRequestConfig): AxiosPromise<UnidadDTO> {
            return localVarFp.obtenerPorNumeroSerie(serie, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UnidadControllerApi - object-oriented interface
 * @export
 * @class UnidadControllerApi
 * @extends {BaseAPI}
 */
export class UnidadControllerApi extends BaseAPI {
    /**
     * 
     * @param {string} terminaEn 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadControllerApi
     */
    public buscarPorUltimosDigitos(terminaEn: string, options?: RawAxiosRequestConfig) {
        return UnidadControllerApiFp(this.configuration).buscarPorUltimosDigitos(terminaEn, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {CrearUnidadRequest} crearUnidadRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadControllerApi
     */
    public crearUnidad(crearUnidadRequest: CrearUnidadRequest, options?: RawAxiosRequestConfig) {
        return UnidadControllerApiFp(this.configuration).crearUnidad(crearUnidadRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} serie 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadControllerApi
     */
    public eliminarUnidadPorSerie(serie: string, options?: RawAxiosRequestConfig) {
        return UnidadControllerApiFp(this.configuration).eliminarUnidadPorSerie(serie, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} mes 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadControllerApi
     */
    public exportExcelPorMesDistribuidora(mes: string, options?: RawAxiosRequestConfig) {
        return UnidadControllerApiFp(this.configuration).exportExcelPorMesDistribuidora(mes, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadControllerApi
     */
    public listar(options?: RawAxiosRequestConfig) {
        return UnidadControllerApiFp(this.configuration).listar(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} serie 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UnidadControllerApi
     */
    public obtenerPorNumeroSerie(serie: string, options?: RawAxiosRequestConfig) {
        return UnidadControllerApiFp(this.configuration).obtenerPorNumeroSerie(serie, options).then((request) => request(this.axios, this.basePath));
    }
}



