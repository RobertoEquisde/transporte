/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CrearDistribuidorDTO,
  Distribuidor,
  DistribuidoraInfoDTO,
} from '../models/index';
import {
    CrearDistribuidorDTOFromJSON,
    CrearDistribuidorDTOToJSON,
    DistribuidorFromJSON,
    DistribuidorToJSON,
    DistribuidoraInfoDTOFromJSON,
    DistribuidoraInfoDTOToJSON,
} from '../models/index';

export interface BuscarPorClaveRequest {
    clave: string;
}

export interface Crear1Request {
    crearDistribuidorDTO: CrearDistribuidorDTO;
}

export interface Eliminar1Request {
    id: number;
}

/**
 * 
 */
export class DistribuidorControllerApi extends runtime.BaseAPI {

    /**
     */
    async buscarPorClaveRaw(requestParameters: BuscarPorClaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DistribuidoraInfoDTO>>> {
        if (requestParameters['clave'] == null) {
            throw new runtime.RequiredError(
                'clave',
                'Required parameter "clave" was null or undefined when calling buscarPorClave().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['clave'] != null) {
            queryParameters['clave'] = requestParameters['clave'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/distribuidores/buscar`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DistribuidoraInfoDTOFromJSON));
    }

    /**
     */
    async buscarPorClave(requestParameters: BuscarPorClaveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DistribuidoraInfoDTO>> {
        const response = await this.buscarPorClaveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async crear1Raw(requestParameters: Crear1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Distribuidor>> {
        if (requestParameters['crearDistribuidorDTO'] == null) {
            throw new runtime.RequiredError(
                'crearDistribuidorDTO',
                'Required parameter "crearDistribuidorDTO" was null or undefined when calling crear1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/api/distribuidores`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CrearDistribuidorDTOToJSON(requestParameters['crearDistribuidorDTO']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DistribuidorFromJSON(jsonValue));
    }

    /**
     */
    async crear1(requestParameters: Crear1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Distribuidor> {
        const response = await this.crear1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async eliminar1Raw(requestParameters: Eliminar1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling eliminar1().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/distribuidores/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async eliminar1(requestParameters: Eliminar1Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.eliminar1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listar3Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DistribuidoraInfoDTO>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/distribuidores`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DistribuidoraInfoDTOFromJSON));
    }

    /**
     */
    async listar3(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DistribuidoraInfoDTO>> {
        const response = await this.listar3Raw(initOverrides);
        return await response.value();
    }

}
